name: Rust SDK

on:
  push:
    branches:
      - main
    paths:
      - 'rust-sdk/**'
      - 'eppo_core/**'
      - 'sdk-test-data'
      - 'mock-server/**'
      - 'package-lock.json'
      - 'package.json'
  pull_request:
    paths:
      - 'rust-sdk/**'
      - 'eppo_core/**'
      - 'sdk-test-data'
      - 'mock-server/**'
      - 'package-lock.json'
      - 'package.json'
  workflow_call:
    inputs:
      test_data_branch:
        type: string
        description: The branch in sdk-test-data to target for testcase files
        required: false
      sdk_branch:
        type: string
        description: The branch of the SDK to test
        required: false

env:
  CARGO_TERM_COLOR: always
  SDK_BRANCH: ${{ inputs.sdk_branch || github.ref || 'main' }}
  TEST_DATA_BRANCH: ${{ inputs.test_data_branch || 'main' }}

jobs:
  cargo_build_and_test:
    name: Cargo Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: ${{ !inputs.test_data_branch }}
          repository: Eppo-exp/eppo-multiplatform
          ref: ${{ env.SDK_BRANCH }}

      - uses: actions/checkout@v5
        if: ${{ inputs.test_data_branch }}
        with:
          repository: Eppo-exp/sdk-test-data
          ref: ${{ inputs.test_data_branch }}
          path: sdk-test-data

      - run: npm ci
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - run: cargo build --verbose --all-targets --workspace --all-features

      - run: cargo test --verbose --workspace --all-features
      - run: cargo doc --verbose

  wasm_compatibility_check:
    # Check if the crate is compatible with the 
    # Precompute Assignments Server.
    name: WASM Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: ${{ !inputs.test_data_branch }}
          repository: Eppo-exp/eppo-multiplatform
          ref: ${{ env.SDK_BRANCH }}

      - name: Add wasm32-wasip1 target
        run: rustup target add wasm32-wasip1

      - name: Check WASM compatibility
        run: |
          cargo check -p eppo_core --target wasm32-wasip1 --no-default-features || {
            echo "Error: WASM compatibility check failed!"
            echo "If you added a dependency that's incompatible with wasm32-wasip1,"
            echo "please make it part of a cargo feature flag that is disabled by default."
            exit 1
          }
